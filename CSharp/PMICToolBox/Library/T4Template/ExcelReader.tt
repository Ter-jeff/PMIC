<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<# #>
<# #>
<# var ClassName = "test"; #>
<# string header = "PinName	SpecificLimit	SpecificIRange	SpecificWaitTime	On_Relay	Off_Relay	MustDiscnctPins	SpecCondiPin	SpecCondiPinVolt_Current	TestItem";#>
<# #>
<# #>
<# Dictionary<string, string> Upperlist = new Dictionary<string, string>(); #>
<# List<string> Properities = new List<string>(); #>
<# List<string> Lowerlist = new List<string>(); #>
<# var headers = header.Split(new Char[] { ',', '.', ':', '\t' }); #>
<# foreach (var word in headers) { #>
<# string name = "";#>
<# bool upperFlag=true;#>
<# foreach (var item in word)#>
<# {#>
<#     if (upperFlag)#>
<#         name += Char.ToUpperInvariant(item);#>
<#     else#>
<#         name += item;#>
<#     if (item == ' ' ||item == '(' || item == ')' || item == '/' || item == '_')#>
<#         upperFlag = true;#>
<#     else#>
<#         upperFlag = false;#>
<# }#>
<# name = name.Replace(" ","").Replace("(","").Replace(")","").Replace("/","").Replace("_",""); #>
<# Upperlist.Add(Char.ToUpperInvariant(name[0]) + name.Substring(1), word); #>
<# Properities.Add(Char.ToUpperInvariant(name[0]) + name.Substring(1)); #>
<# Lowerlist.Add(Char.ToLowerInvariant(name[0]) + name.Substring(1)); #>
<# } #>
<# var ClassNameToLower = Char.ToLowerInvariant(ClassName[0]) + ClassName.Substring(1); #>
<# List<string> list = new List<string>(); #>
<# for (int i = 0; i < Upperlist.Count; i++) { #>
<# string flag =  "true"; #>
<# var headerName = header.Split('\t'); #>
<# list.Add(" { \"" + headerName[i] + "\", " + flag + " }"); #>
<# } #>
<# string headerOptionalDic = string.Join(",",list); #>
using Library.Function;
using OfficeOpenXml;
using System;
using System.Collections.Generic;

namespace Library.T4Template
{
    public class <#= ClassName #>Row
    {
        #region Properity
        public string SourceSheetName;
        public int RowNum;
<# for (int i = 0; i < Properities.Count; i++){ #>
        public string <#= Properities[i] #> { set; get; }
<# } #>
        #endregion

        #region Constructor
        public <#= ClassName #>Row(string sourceSheetName)
        {
            SourceSheetName = sourceSheetName;
<# foreach (var item in Properities) { #>
            <#= item #> = "";
<# } #>
        }
        #endregion
    }

    public class <#= ClassName #>Sheet
    {
        #region Properity
        public string Name { get; set; }
        public List<<#= ClassName #>Row> Rows { get; set; }
        public Dictionary<string, int> HeaderIndexDic { get; set; }
        #endregion

        #region Constructor
        public <#= ClassName #>Sheet(string name)
        {
            Name = name;
            Rows = new List<<#= ClassName #>Row>();
			HeaderIndexDic = new  Dictionary<string, int>(StringComparer.CurrentCultureIgnoreCase);
        }
        #endregion
    }

    public class <#= ClassName #>Reader
    {
	    private ExcelWorksheet _excelWorksheet;
        private string _name;
		private <#= ClassName #>Sheet _<#= ClassNameToLower #>Sheet;

<# foreach (var item in Upperlist) { #>
        private const string Header<#= item.Key #> = "<#= item.Value #>";
<# } #>

        private int _startColNumber = -1;
        private int _startRowNumber = -1;
        private int _endColNumber = -1;
        private int _endRowNumber = -1;
<# foreach (var item in Lowerlist) { #>
        private int _<#= item #>Index = -1;
<# } #>
        private readonly Dictionary<string, bool> _headerOptional = new Dictionary<string, bool> 
		{
           <#= headerOptionalDic #>
		};

        public <#= ClassName #>Sheet ReadSheet(ExcelWorksheet worksheet)
        {
            if (worksheet == null) return null;

            _excelWorksheet = worksheet;

            _name = worksheet.Name;

            _<#= ClassNameToLower #>Sheet = new <#= ClassName #>Sheet(_name);

            Reset();

            if (!GetDimensions()) return null;

            if (!GetFirstHeaderPosition()) return null;

            if (!GetHeaderIndex()) return null;

            _<#= ClassNameToLower #>Sheet = ReadSheetData();

            return _<#= ClassNameToLower #>Sheet;
        }

        private <#= ClassName #>Sheet ReadSheetData()
        {
            for (int i = _startRowNumber + 1; i <= _endRowNumber; i++)
            {
                <#= ClassName #>Row row = new <#= ClassName #>Row(_name);
                row.RowNum = i;
<# foreach (var item in Lowerlist) { #>
                if (_<#= item #>Index != -1)
                    row.<#=  Char.ToUpperInvariant(item[0]) + item.Substring(1) #> = _excelWorksheet.GetMergeCellValue(i, _<#= item #>Index).Trim();
<# } #>
                _<#= ClassNameToLower #>Sheet.Rows.Add(row);
            }
            return _<#= ClassNameToLower #>Sheet;
        }

        private bool GetHeaderIndex()
        {
            for (int i = _startColNumber; i <= _endColNumber; i++)
            {
                string lStrHeader = _excelWorksheet.GetMergeCellValue(_startRowNumber, i).Trim();
<# foreach (var item in Upperlist) { #>
                if (lStrHeader.Equals(Header<#= item.Key #>, StringComparison.OrdinalIgnoreCase))
                {
                    _<#= Char.ToLowerInvariant(item.Key[0]) + item.Key.Substring(1) #>Index = i;
                    _<#= ClassNameToLower #>Sheet.HeaderIndexDic.Add(Header<#= item.Key #>, i);
                    continue;
                }
<# } #>
            }

            foreach (var header in _<#= ClassNameToLower #>Sheet.HeaderIndexDic)
                if (header.Value == -1 && _headerOptional.ContainsKey(header.Key) && _headerOptional[header.Key])
                    return false;

            return true;
        }

        private bool GetFirstHeaderPosition()
        {
            int rowNum = _endRowNumber > 10 ? 10 : _endRowNumber;
            int colNum = _endColNumber > 10 ? 10 : _endColNumber;
            for (int i = 1; i <= rowNum; i++)
                for (int j = 1; j <= colNum; j++)
                {
                    if (_excelWorksheet.GetMergeCellValue(i, j).Trim().Equals(Header<#=Char.ToUpperInvariant(Lowerlist[0][0]) + Lowerlist[0].Substring(1) #>, StringComparison.OrdinalIgnoreCase))
                    {
                        _startRowNumber = i;
                        return true;
                    }
                }
            return false;
        }

        private bool GetDimensions()
        {
            if (_excelWorksheet.Dimension != null)
            {
                _startColNumber = _excelWorksheet.Dimension.Start.Column;
                _startRowNumber = _excelWorksheet.Dimension.Start.Row;
				_endColNumber = _excelWorksheet.Dimension.End.Column;
                _endRowNumber = _excelWorksheet.Dimension.End.Row;
                return true;
            }
            return false;
        }

        private void Reset()
        {
            _startColNumber = -1;
            _startRowNumber = -1;
            _endColNumber = -1;
            _endRowNumber = -1;
<# foreach (var item in Lowerlist) { #>
            _<#= item #>Index = -1;
<# } #>
        }

		public List<Dictionary<string, string>> GenMappingDictionary()
        {
            List<Dictionary<string, string>> mappingDictionaries = new List<Dictionary<string, string>>();
            foreach (var row in _<#= ClassNameToLower #>Sheet.Rows)
            {
                Dictionary<string, string> dictionary = new Dictionary<string, string>
				{
<# for (int i = 0; i < Properities.Count; i++){ #>
					{"<#= headers[i] #>", row.<#= Properities[i] #>},
<# } #>
				};
                mappingDictionaries.Add(dictionary);
			}
			return mappingDictionaries;
        }
    }
}