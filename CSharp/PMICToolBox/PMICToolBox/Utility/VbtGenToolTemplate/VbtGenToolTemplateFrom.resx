<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AABVRaZAdWDd3XJd1PtuXuOLISFIAQAAAAIDAwQBAAABAAAAAAAFBwsAT3zBqVOEzv9Sgcr7UoLL/1KE
        zrEZKEEGAAAAAQMDBQQCAgIDAgICAwICAgMDAQMGAAIAABpJYTY3VofqMlJ+/zNSf/00VoP/Lz9sVwIA
        AwAAAAADAAAAAHVg3tpyXtb/cV3W/HVg2P9yYdqWIhs/AAAAAAICAwUCAAAAAAQGCQBMeL3EU4PN/1KB
        yvxRgcr9VIXQ/098w5MFCA4AAAAAAQABAQAAAAAAAAEBAQAAAAAPGyccMliE2jNSf/8zU4D9MlJ++jVX
        hv8rQ2xtAAAAAAAAAAQAAAAAcV7W+3Jd1v1zX9f+b1vW/HZg2v+zrcuVPjw1AAAAAAIDBggEAAAAAC5H
        aC1ckuLrT37F/1KCy/1RgMj9VIfU/z1di4ArMTY5LzhBRS43P0MvNz5ELDZBPjNSf8I1U4L/M1OA/DNS
        f/w0U4H/M1aGrAwYJAAAAAAAAQEBAAAAAAB2WtWPc2Ha/29b1vxzX9f+q6XD/NnMuv+vyM6gEjtJBQAA
        AAEBBAQEAgMCADxdkUxZjdz9UYDI/lKCy/5Sgcr+VojT/2J+of9ldYT/ZHeL/2Z4if9JZYn9MlKB/jNT
        f/4zU4D8M1OA/zRVgs4PGCURAAAAAAEBAgEAAAAAAAAAACQfQQB1YNyVdF/a/6ylw/vTyrr+r8DC+zPI
        6/8nzvmxFTxKBQAAAAEBAwQFAQICADtckG9UhtL/UYHI/FOCy/5Sgsv+U4HG/1txiv9hb3r/SmKA/zFR
        f/80VID9NFOA/TJSfv82WIflEBooJgAAAAABAgMDAAAAAAAAAAAAAAAAAAAAASMaPgC5ssaV1cu6/7rD
        w/xOzez/DcHw+xnG8P8szvixFDxKBQAAAAEAAgMFBgoNAFeFx5RXidT/UIDJ/U5/yv5HfMz+S3m+/kJe
        gf4kR3f/KUt7/y9Qfv4yUn7/PF6P+iM+X0QAAAAAAQEBBAAAAAAAAAAAAAAAAAAAAAADAwQBAAAAAkNA
        LwC2ysyXadXv/1fU8/s+zfL/FcHu+xjG8f8rzvixETtKBQAAAAIBAgAGDRsuAER0vqRXhs7/aJHO/Yuo
        1P6Ystv/j6XF/4KUq/5qgJ/+QV6H/zNVhPsSKElWAAAAAAUFBgYBAQEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABAwUBAAAAAhk9SQBZ3PqWXtfz/17U8fs7zfL/FcHu+xfG8f8rzvixFj1LBgAAAAA4NzMSnqezj9fe
        6fvl5OT/7+vn//Lt5//08Or/9PHt/uvq6P7h4eL/vsTO4W5ublYQEA8FAAAAAAICAgMBAQEBAAAAAAAA
        AAAAAAAAAAAAAAAAAAADBAQBAAAAAhk9SgBb2/mWXNf0/17U8fs6zfL/FcHu+xrK9f8jv+etoqepYPn1
        8+j09PH/6+jl/uno5v/m5ub/5ubm/+Xl5f/l5eT/6Ofm/+rp5//w7ur++/n4/9nZ2M90dHQ+CgoKAAAA
        AAMCAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAUBAAAAAhg9SgBb2/mWXNf0/17U8fs6zfL/FsLu/RPE
        8f9p3Pj/6+bl/+fk4/zl5uf/5+bm/+bl5P/m5OP/5eTj/+Xk4//n5uX/5+bl/+bl5f7k4+L86+ro////
        //2lpKN0AwICAAEBAQIBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAUBAAAAAhg9SgBc2/mWXtv4/17U
        8v06zPL/F8Pv/Qi/7v1c0O797Ojm/+rn5v/n6Oj/8O/u//Tz8v/09PP/8vLx/+3s6//n5uX/5uXk/+jn
        5v/n5uX84eDg/Pv6+f+mpaWFAwMDAAICAgMBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAUBAAAAAhg+
        SgBTy+uTWdb1/17V8v06zPL/GcTw/wvC8f9c0O3/7enn/+jk4v/DwL7/p6Kf/6Ccmv+vq6j/0tDN/+/u
        7f/v7u3/5uXk/+jn5v/o5+b+4+Lh/Pv6+f+lpaRjAAAAAAEBAQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABAgMFAAAAAKesrl6e5/n/T9Hx/WDW8/86zPL/GMPv/w7D8/9SyOT/WVVW/ysjKP8rIyT/LCMi/ysj
        Jv80LTH/b2hm/8rHxP/x8PD/5uXk/+jn5v/o5+b+5eTj//X08/JHR0YpAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAwMDAQAAAABDREQZ9fHw5Ovm5P+T3O7+UtT0/1/V8v88zPH/D8Ht/zfO/v9oe3v/dVof/5uC
        Nv+ghTT/kXgx/2hWLP8uJCH/NS0t/6ijoP/w7+//5uXk/+jn5v/m5eX77ezr/9va2aQUFBQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAABAQEEAAAAAK+urn/z8/L/5eTj++3o5v+T3O7/Vtf3/1nV8f9Tze//pNj//7/S
        z//btCz/4LYh/962Iv/etiT/1a8v/66QM/9MPir/KyMk/7Gtqv/x8PD/5uXk/+jn5v7k4+L/9/X19Xp6
        eioAAAAAAAAAAAAAAAAAAAAAAQEBAQAAAAAUFBQG4+Li2Oro5//n5+b96Ofm/+/p5/+Dzd7/Z9j4/6za
        //+z3v//oMTg/6KPV/+Mf4D/fHeR/5eGcP/IpTL/2bIq/72cMv9DNyj/Qzw8/9rZ1//r6+r/5+bl/+bl
        5Pzv7u3/tra1fwAAAAAAAAAAAAAAAAAAAAAEBAQCAAAAAGtrayf39vX55eTj/+jm5f7p6Of/5+Ti/1hR
        Uf9qeHj/vNLT/5/D4P9HQS7/Nzh3/zVG/f8zPvL/M0bx/1thvv+8nT//2rIr/5qAMv8mHR//k46L//Pz
        8v/m5OP/6Ofm/ebl5P/y8fDDAAAAAAAAAAAAAAAAAAAAAAQEBAQAAAAAdnV1Yfz6+f/k4+L95uXk/+/v
        7v/CwL3/KyQp/3VbIP/btCv/oY5X/zY3df86M17/OV7f/zR15/8+UeL/MEL2/2lqq//SrCn/yaYy/0M3
        Jf9aVFT/6ejm/+jn5v/o5+X/6Ofm/+bl4/QAAAAAAAAAAAAAAAAAAAAABAQEBAAAAAB0c3N0+/r5/+Tj
        4vvn5uX/9PPy/6ahnv8rIyT/m4I2/9+2If+Lf4H/NUb9/zle3v8due3/Fs3x/yaa7P89Seb/QE/g/7qd
        Rf/Uriv/ZFIr/z02Of/g39z/6+rp/+fm5f/o5+b/6Ofm/gAAAAAAAAAAAAAAAAAAAAAEBAQEAAAAAHRz
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>