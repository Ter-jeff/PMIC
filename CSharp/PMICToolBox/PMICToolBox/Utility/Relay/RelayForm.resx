<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>56</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAbw+/RF8bz/ye03P5AmLv/GcTw/xrC7v9Blbj/JLfg/xTK9/84oMT/M6bM/xLM+v8rr9f/PZq9/xjF
        8v8cwez/Q5O1/yG75v8WyPX/Op3B/zCq0P8SzPr/LqzS/zydwP8YxvL9GcHt/xjL+NQBR1QHAAAAAAAD
        AwEAAAAAAAAAABfG8v8Vyvb/Jbbe/z6avf8ZxPD9GsHt/T+Xuv0juOH9FMn2/Tehxv0xp839Esv5/Smw
        2P07nL/9GMTx/RzA7P1Blbf9ILvm/RXI9P45oMT/LqvS/xLM+v8trdT/OZ/D/xfE8PsaxPH/GND5wAFG
        SwEAAAAAAAMDAQAAAAAAAAAAJrXe/iW23/8cwOz/Hr3o/xnD8P8ZyPX/H8Dr/xrG8v8YyPX/HsLt/x3D
        7/8YyPb/G8Tw/x/B7P8ZyPX/Gcf0/x/A6/8ax/T/Gcj1/x6+6P8cwOz/GMXy/xzB7P8evOb7Gcfz/xnJ
        9MUHOEQSAAAAAAECAwEAAAAAAAAAAAAAAAA/mLr/PZq9/x+85/8Wy/b+GMnw2hi34dIXu+XTGLrj0xi5
        49MXu+TTF7rk0xi549MXuuTTF7rl0xi549MYuePTFr3n1Be34dIYt+DmGMf0/xjE8P8ZxPD/GMLu+xjH
        9P8ayfTDCDhFEgAAAAAAAwMDAAAAAQAAAAAAAAAAAAAAABnE8P8ZxPD9GcPw/xjJ89kCR0wMAQECAgIM
        DwUBCg0EAQsNBAIKDAQCCgwEAQsNBAEKDQQBCg0EAQsNBAENDwQBCQsKAAcJABKUtWwazPr/GcLu/BnC
        7vsaxvL/Gsn0wwg5RREAAAAABgcGAg4NCwAICQsBAQAAAQAAAAAAAAAAGsLu/xrC7f0Zx/T/GLnj0AEK
        DQQAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAAAAAwAAAAAQhaU5GtH/6xnC
        7f8Zwu76Gcbz/xnJ9MUIOUYTAAAAAAMFBQCZf2F28MmewHRoXCcAAAAABAQDAgAAAABBlrf/P5e6/SDA
        6/8Wu+XSAg0PBQAAAAAAAgICAAEBAQABAQEAAQEBAAEBAQABAQEAAQEBAAIDAQABAgUAAQIAEYmpPBvT
        /+0Zwe3/GcLu+hnG8/8ZyfTFCDlGEwAAAAACBAQAoYVmgPTLn//kvpT/3raKyUQ6MQoAAAAAAgIBASS4
        4f8juOH9G8by/xe549IBCg0EAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAgAAAgEEAAECABGI
        qDsb1P/tGcDr/xnC7vgZxvP/Gcn0xQg5RhMAAAAAAgQEAKGEZoD1zaH/1ap8/NWmdvnpwJT/4MKhhxAQ
        EAAAAAADFMn3/xTJ9v0YyPX/GLnj0gEKDQQAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAQIAAAIBBAAB
        AgARiKg7G9T/7RnA6/8Zwu74Gcbz/xnJ9MUIOUYTAAAAAAIEBAChhGWA9c2g/9WpfPzEhEf+w4FD/taq
        fP/xx5r2blpFKwAAAAA5nsP/N6DF/R7C7f8XuuTSAgoNBAAAAAAAAQEBAAAAAAAAAAAAAAAAAAECAAAC
        AQQAAQIAEYioOxvU/+0ZwOv/GcLu+BnG8/8ZyfTFCDlGEwAAAAACBAQAoYRmgPXNoP/VqXz8w4JE/tal
        c//Snmr/x4tR++jAl//QrIWVDAoIADKnzf8xp839HcPv/xe65NICCg0EAAAAAAABAQEAAAAAAAAAAAAB
        AgAAAgEEAAECABGIqDsb1P/tGcDr/xnC7vgZxvP/Gcn0xQg5RhMAAAAAAgQEAKGEZoD1zaH/1al7/MOC
        RP7UoW7/5L+X/9+2i//FhUj+2ap7/+O+ledBNioWEsz6/xLL+f0YyPX/GLnj0gEKDQQAAAAAAAEBAQAA
        AAAAAQIAAAIBBAABAgARiKg7G9T/7RnA6/8Zwu74Gcbz/xnJ9MUIOUYTAAAAAAIEBAChhGWA9c2h/9Wp
        e/zDgkT+1KFv/+O9lf/guI7/5MGZ/9GbZv/Jklv+88ug/4VtVV8qsNj/KbDY/RvE8f8XuuTSAQoNBAAA
        AAAAAQEBAAECAAACAQQAAQIAEYioOxvU/+0ZwOv/GcLu+BnG8/8ZyfTFCDlGEwAAAAACBAQAoYRmgPXN
        oP/VqXz8w4JE/tShbv/kv5b/4r2U/+K8k//csIL/yo9W/8WGSfzguY7/2rSLnD2avf87m7/9H8Hs/xe6
        5dICCg0EAAAAAAACAgEAAgEEAAECABGIqDsb1P/tGcDr/xnC7vgZxvP/Gcn0xQg5RhMAAAAAAgQEAKCD
        ZYD1zKD/1al7/MOCRP7Vo3H/5sOb/+C4jv/WpnX/yY5T/8WFSf/Mk1z/xoZK/dyxhP/jvZPKGMXx/xjF
        8f0ZyPT/GLnj0gEKDQQAAAAAAAICBAABAgARiKg7G9T/7RnA6/8Zwu74Gcbz/xnJ9MUIOUYTAAAAAAME
        BACghGWA986i/9eqfPzFhUj+1aV0/9+2jP/QmmX/xodL/8eJTf/RnWj/3bSI/+K8k//Ii1D+2Kl5/+O9
        lOkcwez/G8Ds/RnG8/8YuePSAQwOBAAAAAIAAgMAEYioOxvU/+0ZwOv/GcLu+BnG8/8ZyfTFCDlGEwAA
        AAACBAUAoIRlgPnPov/EnHL8tntB/s+VXf/OlmD/xYZK/8uRWf/XqHf/4bqR/+S/l//jvZP/4buR/8mO
        VP/WpXT/476V+EOTtf9Blbf9H8Dr/xe75tICDA4JAAAAABGJqTwb1P/tGcDr/xnC7vgZxvP/Gcn0xQg5
        RhMAAAAAAgQEAKCEZoD5z6L/x6B2/IBXKv6UYy//yIpN/8yUXv/arX7/4LqP/+G6kP/gt4z/37aK/9+2
        i//ft4z/yY1S/9alc//jvpX4ILzm/x+85v0ax/P/F7nj0gEMDwARhaU6G9T/7RnA6/8Zwu74Gcbz/xnJ
        9MUIOUYTAAAAAAIEBACghGaA+tCj/8egdvyFWy3+fFMl/45fLv/EhEf/yo9W/8eKT//Fhkn/xYVI/8WG
        Sv/Fhkr/xYdK/8aHS//DgUL+16d2/+K9leoWyPX/Fsj1/hnI9f8Yt+DmEpS2bBvR/ucZwez/GcLu+BnG
        8/8ayfTDCDlFEgAAAAACBAQAoIRmgPjOov/Dm3H8gFcq/nxSJf96Uyb+omw2/ciGSP/LkVn/16l4/961
        iP/etIn/3LGE/9ywg//dsoX/2q1//8WFSf3csIP/5L2UzTqewv84oMT/Hr7p/xjH8/8bzPj/GcLu/hnC
        7voZxvP/Gcn0xQg5RhMAAAAAAgQEAKGEZoD1zaH/16p8/LZ6Qf6UYzD/jl8u/6JsNv3DgkT+zJBX/8mO
        VP/DgkP/zJJZ/9msfP/ivJP/5MCX/+TAmf/Zq3v/x4lO/OG6j//dtY6dL6vS/y6s0/8cwOv/GMTw/xnC
        7vwZwu76Gcbz/xnJ9MUIOUYTAAAAAAIEBAChhGaA9c2h/9Woe/zEhUj+z5Ze/8iJTf/EhEf/yIdJ/8qO
        VP/GiE3/16Z2/9utf//KkFj/woFC/8aHSv/Snmv/4LiO/86XYP/Kklz+8cmd/31lTGISzPr/Esz6/xjF
        8f8ZxPD/GcLu+xnG8/8ZyfTFCDlGEwAAAAACBAQAoYVmgPXNoP/VqXv8w4FD/tWlc//OmGL/y5Nb/8qP
        Vf/Mk1z/yItR/9endf/CgUT/2Kp7/+XCmv/dsYT/0Jtm/8SER//Fhkr/w4NF/tWneP/zzaTpeGxfFy2t
        1P8srtX/HMHs/xjC7vsaxvL/Gcn0xQg5RhMAAAAAAgQEAKGFZoD1zaH/1al7/MOCRP7Uo3H/4LeM/8WG
        Sf/arH3/x4pP/9mqe//Eg0X/2ap7/9mrfP/Cf0H/16Z1/+TAmP/jvZT/4ryT/8uQWP/GiU7758CV/86r
        hZcSEhIAO53B/zmfw/8evOb7GMf0/xnJ9MUIOUYTAAAAAAIEBAChhGaA9c2h/9Wpe/zDgkT+06Fu/+XD
        nP/Qm2f/y5BX/+G6j//FhUn/3rSJ/86VXv/IjVL/5cGa/9eod//DgUP/1qZ1/+TAmP/csoT/xIVI/tWo
        ev/yyJv4bVpGLQAAAAAYxfL9F8Pw+xnH8/8ZyfTFCDlGEwAAAAACBAQAoYVmgPXNof/VqXv8w4JE/tSi
        b//jv5f/4LiO/8aITP/XqHf/4bqQ/8SFSP/dtIj/2q6A/8KAQv/br4H/5cCY/9endf/DgkT/1qZ1/8iL
        Uf/OmGP76sGX/+DCoYgQEBAAAAAAAxnC7f0axvH/Gcn1xAc5RhMAAAAAAwQEAKGFZ4D1zKD/1al7/MOC
        Q/7Uom7/476V/+O9lP/Xpnb/x4hM/+G6kf/ft4z/xYZK/9yxg//jvZT/x4pO/8+XYf/ivZP/5MCY/9em
        df++ejn/ypFZ/OG7kf/euY7JRDsxCgAAAAACAgEBGsj01hnJ9sEIOEQRAAAAAAABAgCbgGJ29Mue/9et
        gfzFhUn+1qV0/+S/l//guI3/4ryT/8qPVf/RnGf/5L+X/9+2iv/Fhkr/27CC/+S/l//UoW//w4NG/+G7
        kP/dsoX/yItR/8uRWfzXs4j//M6h5HhTRigAAAAABAMDAgAAAAAJPFMJAzZOBwAAAAAAAAECDw4MAOzK
        n7jkvZP/2Kx++cSDRv7RnWn/37aL/+TBmf/csYT/xYVJ/96zh//ivZT/37aL/8WGSv/csoX/5MGZ/+G6
        kP/Fh0r/yo9V/8WGSf7OmGL74LuR//3OoeaYiWkyBAACAAICAQMAAAAAAAAAAAAAAAAAAAACAAMDAQAA
        AAEGCAoAcmZbI962i8vowJT/1al7/ceLUfzFhUj+0Jpl/8uQV//Mk1r/4ryT/+G7kv/ftoz/xYdL/9mt
        ff/Yqnv/zpZg/8SERf7GiU781ah7/erBl//euo/NdFFEJQsGBgAAAAADAQEBAAAAAAAAAAAAAAIDAQAC
        AwEAAAAAAAAAAAICAgEAAAAARDsyDODCoonyyJv56MGX/9mqe//JkVr+xYZJ/MWGSv3Iik//yY1T/8mM
        Uv/DgUL+xYVI/saJTfvKklv+1ad3/+fAlf/yyJv44MKhiEU8MgsAAAAABAQDAwEBAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQDAwIAAQICERAQAG9aRirLqICY5L6V6vPLn//huY7/3LGD/9io
        ef/VpHP/1aVz/9endv/csIP/4bqP//HJnf/zzaTrzqyGmGxXQikREBAAAAECAgQDAgIBAQEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgEAAAADAgIBAAQDAgBBNCgXhW5VYdm1
        jKDkvpPO476U6+O+lvvjvpb6472V6uS9lM7bto2gfGVMYXZqXhcTEhIAAAAAAAEBAQMCAgIBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>