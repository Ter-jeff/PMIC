<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        4v8U0///QZ3K/nyLuf+ZwOn/n8bu/5/G7v+bwur/ncPs/6PL8/99ncn/c4+9/7Ld//+ZwOj/aoSz/6vU
        +v+s1/3/c4i2/zWx3f8V2v//JNT+/6rj/Piv1fq9fZu3bh4bHCAFAgIAcV3S/3Bc0/5wXNP9alXV/J2V
        xf3UxrT+f73N/Q/C8f0cxPD+Q5rI/mZ9rP9siLf/bYi3/2aAr/9phLP/b4q5/2aAr/94lsL/st3//5i/
        5/9pg7L/qdL5/67Y/v92kb7/LavX/hTE7v4gwOv+ndD1/7Xe//+gxOX/QTk3/DYsKbpxXdb/cFzT/3Bc
        0/5qVdX+nZXF/tTGtP9+vs7+DsDu/hfD7f8eu+f/Z4a1/qTL8v+p0vn/a4e2/4an0/+04P//hKXQ/3OQ
        vf+y3f//mL7m/2mEs/+p0vn/rNf9/3aRvv4tqtb+E8Tv/x/A6v+g1Pn/tN7//5/F6P8+ODfyMyonqXRg
        29R8Z+v/gGvn/ntl6f+vp9n+6drH/Y/S4f4c1P//H9b//iPK+P5khbP+q9P3/LPf//xqhrT9i63W/L/t
        //2Hp9H8cY66/bfk//yawef8aIKw/azX+/yx3P/8dI26/S635P4V2P/8Jdb//5/V9fCw0/eukKe6XRIV
        FxQAAAAAIRs/Ez0ycjVGPWZHSEBnUFdTYj9qY10yTWVpQCpjcVEXYXQ8EmV8NWmGuNOIqdb/kbbg/WmE
        tv95l8X/mL3m/3OSwf9tibr/lbrj/4Oj0P9mgbX/iq3Y/o+y3f9wi7zuMHaTSgVdcTAYa4M4KDtGGAYG
        BgALCgkAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIEAwQAOD9aLFtz
        nrNieqjDTF+DXVZxm4lgeKjQXm+QfUxff2Zhe6rKV22YoFFfeVVheKSzYHqpw0VaeUsDAQEAAAAAAgAA
        AAAAAAAAAAAAAgICAwQBAQIBAAAAAAEBAwECAgQCAwIEAwMDBQMDAgIEBgoMAiVgdA4HERIFAAECAwEE
        BQIAAQEABQcJAAcICwADBAUABAcJAAYICwAHBgYABAQEAAcICwAFBgkABAQCAAcJCgAJCw4ACQoLAAAA
        AQIABQYCAQQFAgICAwIBAQEAAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAECQoIYeb/zS1q
        eTMAAAAAAgQFAgICAwIAAAACAAAAAAEBAQMAAAACAAAAAAAAAAMBAQEDAAAAAAAAAQEDAwMEAAAAASMi
        IgltbW0eAAAAAAYGBgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAwYAAwQHAAUN
        Dwtf3v3WMXSENwAAAAADBwkCAAAAAAAAAQEAAAEBAAABAAAAAQAAAAEBAAAAAAAAAAAAAAEAAQECAAAA
        AAMCAgMApaWlWODg36ENDg0AAAAAAgEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAUBAAAAACtu
        fxVj7P/MXt38wkarwhRUx+OSZ/H/5C9tfD0AAAAAAgQFAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAACAgIAGBgYBq6urVL6+ffj7Ovq/7Gwr4NBQUEUAAAAAAEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAC
        AgAAAAAABUBBBix4hkUycYFHVcjkiEGbslIwcH9KGTlBFAAAAAABAgIBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQICAwBoaGca4+Lgr+Xk4//l5OP/////4KSko0cAAAAAAQEBAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAQEBAAAAAAMHCQxl7f/mMnaDOQAAAAACBAUCAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAIUExMA4N/elvj39t1FRUQSAAAAAAICAgEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwABAwQCBAgJBDFzg1IaO0UUAAAAAAIEBQEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQUFAgAAAABVVVMjs7KxUAAAAAABAQEEAQEBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>