<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAANgBAADYAQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBQoKFRAjNycdRH48LWu2Py116UAt
        e/tBLnf/SjFE/0syPPtKMjvpRTA3tiwfJH4ZERM2CAUGCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBAgHHxc0RzYmYaY9K3TmQS5//UAt
        gP9ALYD/QC2A/0Euef9LMUT/TDI9/0wyPf9MMj3/TDM9/UcvOeU/KTGmIxkdRwoFBQgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEg0dJi0hUZhALnzuQS2B/0At
        gf9ALYD/QC2A/0AtgP9ALYD/QS55/0sxRP9MMj3/TDI9/0wyPf9MMj3/TDI9/00yPf9LMz3vQSQqmxgO
        ECcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAIHABYQM0Y6KWzMQS6B/0At
        gP9ALYD/QC2A/0AtgP9ALYD/QC2A/0AtgP9BLnn/SzFE/0wyPf9MMj3/TDI9/0wyPf9MMj3/TDI9/0wy
        Pf9NMz7/Qy03zSYRFEcGAgMBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDDAAtJlZQPi174UAt
        gP9ALYD/QC2A/0AtgP9ALYD/QC2A/0AtgP9ALYD/QC2A/0Euef9LMUT/TDI9/0wyPf9MMj3/TDI9/0wy
        Pf9MMj3/TDI9/0wyPf9MMj7/TDE54jcpIVEHBgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRhNRkdF
        ueFGPaD/QC6B/0AtgP9ALYD/QC2A/0AtgP9ALYD/Pyx//0Atf/9DMIP/RTJ//1E1Sf9QNUD/TDI9/0sx
        PP9MMj3/TDI9/0wyPf9MMj3/TDI9/0wyPP9gQTT/dVAo4jAkDkYAAAAAAAAAAAAAAAAAAAAAAQECABgW
        MiZDQqnNTUzO/0tKx/9FPJ//QC6B/0AtgP9ALYD/QC1//0QxhP9QPZb/XEms/2RRuf9sVrn/hlt5/4NX
        av93T2D/ZENQ/1E2Qf9LMjz/TDI9/0wyPf9MMjz/X0Az/3xUKf+BVyj/bkslzR4UDCYAAAAAAAAAAAAA
        AAAKCRMJQUCZmk1MzP5MS8z/TEvM/0tKx/9FPJ//QC6B/0EugP9QPZb/ZVK8/3Bc0f9zX9j/c1/Z/3df
        zv+WZIj/mmZ9/5pmfv+WY3r/hFhs/2JCUP9NMz7/TDI8/2BAM/98VCn/gFYo/4BWKP+BVyn+UzkdmQkG
        BAkAAAAAAQEBACMhTEhLScLvTEvN/0xLzP9MS8z/TEvM/0tKx/9HPZ7/V0Wi/29bz/9zX9j/cl7X/3Je
        1/9yXtj/dl/N/5Vkh/+ZZXz/mWV9/5llff+aZn7/k2F5/29KWf9iQjT/fFMp/4BWKP+AVij/gFYo/4BW
        KP98VSnvNSQWRwEBAQAHBg0KPjuTpk1Mzv9MS8z/TEvM/0xLzP9MS8z/TUzL/15e0f9tZNP/cV7V/3Je
        1/9yXtf/cl7X/3Je2P92X83/lWSH/5llfP+ZZX3/mWV9/5llff+ZZnr/o21Z/5dmN/+BVin/gFYo/4BW
        KP+AVij/gFYo/4FXKP9iQSKmCgcEChcXNTdHRrjmTUzN/0xLzP9MS8z/TEvM/0xLy/9YWdD/c3f0/3V5
        9v9vZtj/cV3U/3Je1/9yXtf/cl7Y/3Zfzf+VZIf/mWV8/5llff+ZZX3/mWV5/6VvW//AgET/vX5C/5Fh
        Mf9/Vij/gFYo/4BWKP+AVij/gVco/3VPJ+YkGQ42LStqf01LyvxMS8z/TEvM/0xLzP9MS8z/T07K/2pt
        5f93e/z/dnv8/3R49f9vZtj/cV3U/3Je1/9yXtn/d2DP/5ZliP+aZX3/mWV9/5llef+mb1r/v4BE/8OC
        RP/EgkT/rnU9/4NYKv+AVij/gFYo/4BWKP+AVij/gFYp/EYwGX5GQqe4TEvN/0xLzP9MS8z/TEvM/0tK
        zP9YWdD/dHn1/3Z7+/92e/v/dnv8/3R49f9vZtj/cV7U/2xZv/9nUpH/elVl/41fcf+ZZXn/pm9a/7+A
        RP/DgkT/w4JE/8OCRP+/f0P/kGIx/39VKP+AVij/gFYo/4BWKP+AVij/bUsntkpIuOpMS83/TEvM/0xL
        zP9MS8z/TEvK/2Nl3f93fPz/dnv7/3Z7+/92e/v/dnv8/3R49f9jWKL/RjlG/zwyL/88MS7/TDo6/4lf
        Tf+/gEX/w4JE/8OCRP/DgkT/w4JE/8SDRP+ibTj/f1Yp/4BWKP+AVij/gFYo/4BWKP93USnpS0nC/EtK
        zP9LScz/TEvM/0xLzP9OTcr/amzh/3h8/P93e/v/d3v7/3d7+/93e/3/cHHc/0c+TP83Lin/OC8s/zgv
        LP82Liv/Uz8w/7J4QP/EgkP/w4FD/8OBQ//DgUP/xIND/6tyPP+BVyr/f1Uo/39VKP9/VSj/f1Uo/3pT
        KPtGT8z/Y2nS/3t91f9KU8//R1DP/0pU0P9ldOn/bX/7/21/+v9tf/r/bX/6/22A/f9iZKr/PDEv/zgv
        LP84Lyz/OC8s/zgvLP89Mi3/l2xC/8eLTv/Fik7/xYpO/8WKTv/Gik7/tX9H/4xiLP+IXyn/iF8p/4hf
        Kf+IXyn/hl4p/yZ13/9voeT/rcXl/zN+4v8od+L/Knrg/yqO5f8omPP/KJjz/yiY8/8omPP/KJr2/z50
        n/88Mi3/OC8s/zgvLP84Lyz/OC8s/z0yLf+fjGv/08OX/9HBlf/RwZX/0cGV/9HClv/GtIH/wqA3/8Sf
        Lf/Eny7/xJ8u/8SfLv/BnS7/I3ja/GOg5v+0y+b/M4bl/yR95f8lfuH/Io7e/x6d8/8enPL/Hpzy/x6c
        8v8enfP/KozQ/z5BRv84LSn/OC8s/zgvLP82LCr/Vkg9/7+yjf/Vy6H/08qg/9PKoP/TyqD/1Muh/8S2
        gf/JpzX/zakv/82pL//NqS//zakv/8OgL/smc87qTZTm/8HS5v8/jOX/JH3l/yV94v8jiuD/H5zy/x+c
        8v8fnPL/H5zy/x+c8v8jnO3/RYmn/0RMSv87My//PDMu/01LOf+OlWn/zcab/9TJn//TyZ//08mf/9PJ
        n//TyaH/xrNv/8qmMP/MqC//zKgv/8yoL//NqC//uZgv6SVqu7g2iOb/uc7m/2Gf5v8ifOX/JX7l/yWD
        3P8gme3/H5zy/x+c8v8fnPL/IZzt/z+v4v9Z0O//Wb7W/1uZoP98l2f/krpy/53Nff+swIX/zsWb/9PJ
        n//TyZ//08mf/8/Fm//EqlP/zKgu/8yoL//MqC//zKgv/82pL/+piyy2GUR3gCh/4/yYvOb/lLrm/yd/
        5f8lfuX/JX7h/yKQ4/8fnPL/H5zy/yGc7f8+ruH/WdDv/1vW8/9b1vb/Ytbp/5jTjP+f0X7/ntB+/5zN
        ff+rv4X/zsWb/9PJn//TyaH/yLmD/8inOP/MqC//zKgv/8yoL//MqC//yqcw/GtYHX4PIzs3InLP5l2d
        5/+aveb/L4Pl/yR+5f8lfeT/JIPd/yCY7P8hnO7/Pq7h/1nQ7/9b1fP/W9Xz/1vV9P9i1Ob/l9GL/57Q
        ff+e0H7/ntB+/5zNff+rv4X/zsec/8/EmP/EqlP/zKgu/8yoL//MqC//zKgv/82pL/+5mC3mNiwQNgUJ
        DwoiX6WnKYHn/zKF5f8mf+X/JX7l/yV+5f8lfuP/JYXX/z6r3f9a0O//W9Xz/1vV8/9b1fP/W9X0/2LU
        5v+X0Yv/ntB9/57Qfv+e0H7/ntB+/53Nff+pvIL/v6tk/8qnMv/MqC//zKgv/8yoL//MqC//zqkv/5V7
        JqYODAUKAQECABYyVkgmedrvJH7m/yV+5f8lfuX/JX7l/yV94f8jk9b/PLvc/1jQ7v9c1fP/W9Xz/1vV
        8/9b1fT/YtTm/5fRi/+e0H3/ntB+/57Qfv+f0H7/mst6/4G2Yv+XpD//x6Uv/8yoL//MqC//zKgv/82p
        L//EoS/vUEEXRwIBAQAAAAAABQwVCR1eqJsmf+X+JX7l/yV+5f8mf+H/IJTb/xq+7P8bwu3/ML/k/03H
        5v9Z0e7/XNXz/1zW9f9j1Ob/mNGL/5/Rfv+f0H//m8x7/4/CcP97uFz/b7hQ/3G3Tf+ZpTz/x6Uv/8yo
        L//MqC//zakw/pt4IZoVDgQJAAAAAAAAAAAAAQIADCA3JiRrvs0kfuf/P4rj/4a34P85w+r/F8Tw/xjE
        8P8Zw+//H8Hq/zG/5P9BxOX/TMTi/1jI2v+LxID/jr5u/4e9aP97uFz/cbhS/265T/9vuk//b7pP/3G2
        Tf+ZpTz/x6Uv/8+pL/+sjivONCkNJgIAAAAAAAAAAAAAAAAAAAAAAAAADjJaRyR30uIym9z/nNjo/7Pe
        6f9Mze7/G8Xw/xjE8P8ZxPD/GMTw/xrB7P8dwev/KMLb/2m6ZP9xt1D/b7hP/266Tv9vuk//b7pP/2+6
        T/9vuk//b7pP/3G2Tf+apjz/upou4k46EEcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBw4BGk9tURux
        2eImyPL/hNbr/8Lh6P981ev/H8Xw/xXD8P8WxPD/GMTw/xjE8f8iw97/Zrth/3C6Tv9vuk//b7pP/2+6
        T/9vuk//b7pP/2+6T/9vuk//b7xQ/2yoS+NSWSRRDAgCAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAACDAwBC0tXRxmjx80exfD/VM/u/3zV6/8tx+//adLs/1zP7f8uyO//GcTx/yLD3v9mu2H/cLpO/2+6
        T/9vuk//b7pP/2+6T/9vuk//b7tP/3C7T/9gnEXOKz8iSAUIBgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACy83JxWOqJkau+XvGsby/yPH8f+D1uv/uN/o/4HV6/8cxfH/IsPe/2a7
        Yf9wuk7/b7pP/2+6T/9vuk//cLtP/3C7UP9ss03wU38+nB4qFicAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBETBxFLWkgZkKynGbHZ5h3D7v0ryPD/Ksfw/xnE
        8f8iw97/Zrth/3C6Tv9vuk//b7tP/2+5T/1mqUnmVoc9pzBHI0gLDgkIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQOEAoMND44E2d9fxyi
        xLccsdfqGrvl+yLA2v9luGD/bLJM+2ipS+lhmUa3PmItfyEyFzgKDQcKAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//5////wD///gAH//gAAf/wAAD/4AAAf8AAAD/AAAA/gAAAHwAAAA8AA
        AAPAAAADgAAAAYAAAAGAAAABAAAAAAAAAACAAAABgAAAAYAAAAHAAAADwAAAA8AAAAPgAAAH8AAAD/AA
        AA/4AAAf/AAAP/4AAH//gAH///AP///+f/8=
</value>
  </data>
</root>